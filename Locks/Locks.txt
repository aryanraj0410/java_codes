What are Locks in Java?

A Lock in Java is a tool for controlling access to shared resources by multiple threads.
It comes from the package java.util.concurrent.locks.

ðŸ‘‰ Think of it like a door lock:

Only one person (thread) can enter the room (critical section) at a time.

Others must wait until the lock is released.

ðŸ“Œ Why use Locks?

To prevent race conditions (when multiple threads try to update shared data at the same time).

To provide more flexibility than synchronized blocks (like try-lock, timed-lock).

ðŸ“Œ Main Lock Interface

Lock is an interface in java.util.concurrent.locks.

The most common implementation is ReentrantLock.

ðŸ“Œ Important Methods of Lock

lock() â†’ acquires the lock, waits if not available.

unlock() â†’ releases the lock.

tryLock() â†’ tries to acquire lock immediately, returns true/false.

tryLock(time, unit) â†’ waits for given time before giving up.

newCondition() â†’ for thread communication (like wait/notify).